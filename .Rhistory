install.packages("swirl")
library("swirl")
swirl()
getwd
getwd()
getwd()
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
dim(andy)
str(andy)
summary(andy)
names(andy)
?which
andy[1, "Weight"]
andy[which(andy$Day == 30), "Weight"]
andy["Weight"]
andy[1, "Weight"] - andy[30, "Weight"]
andy[which(andy[,"Day"] == 30), "Weight"]
subset(andy$Weight, andy$Day==30)
?subset
files <- list.files("diet_data")
diles
files
files[1]
files[2]
files[3:5]
head(read.csv(files[3]))
files_full <- list.files("diet_data", full.names=TRUE)
head(read.csv(files[3]))
head(read.csv(files_full[3]))
head(read.csv(files_full[3:5]))
for (i in 1:5) {print(i)}
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
data <- data.frame()
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
median(dat$Weight)
dat
?complete.cases
median(dat$Weight, na.rm=TRUE)
?mean
?mode
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
median(dat_30$Weight)
files_full <- list.files("diet_data", full.names=TRUE)	#list files in (fullpath)directory
summary(files_full)
tmp <- vector(mode = "list", length = length(files_full))
summary(tmp)
for (i in seq_along(files_full)) {
tmp[[i]] <- read.csv(files_full[[i]])
}
str(tmp)
str(lapply(files_full, read.csv))
output <- do.call(rbind, tmp)
str(output)
dim(output)
swirl()
library(swirl)
ls()
rm(list = ls())
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
seq_along(c(0, 1, 2))
seq_along(c(6, 1, 2))
args(sd)
args(rnorm)
ags(past)
args(past)
args(paste)
help.search(paste)
help.search("paste")
?lm
lm <- 5
?lm
search()
c <- c(1,2,3)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
?strptime
x <- as.Date("1970-01-01")
x
unclass(x)
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
unclass(x)
x <- Sys.time()
unclass(x)
p <- as.POSIXlt(x)
names(unclass(p))
p$sec
library("swirl")
rm(list=ls())
swirl()
library("swirl")
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},x)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
telegram("I'm getting bored")
submit()
submit()
submit()
mad_libs(noun="fountain",place="school",adjective="R")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
setwd("D:/Work/Coursera/Projects/assign2/ProgrammingAssignment2")
source("cacheMAtrix.R")
source("cacheMatrix.R")
cacheSolve(c(1,4,3,2,4,6))
m <- makeCacheMatrix(c(1,4,3,2,4,6))
cacheSolve(m)
m <- makeCacheMatrix(c(1,4,3,2,4,6))
m <- matrix(c(1,4,3,2,4,6,1,7,9),nrow=3,ncol=3)
m <- makeCacheMatrix(m)
cacheSolve(m)
m
dim(m)
m
cacheSolve(m)
View(makeCacheMatrix)
makeCacheMatrix()
makeCacheMatrix()
makeCacheMatrix(m)
m$getinverse()
m$getinverse()
m <- makeCacheMatrix(m)
m$getinverse()
cacheSolve(m)
m
m <- matrix(c(1,4,3,2,4,6,1,7,9),nrow=3,ncol=3)
m
solve(m)
cacheSolve(m)
getwd()
m <- matrix(c(1,4,3,2,4,6,1,7,9),nrow=3,ncol=3)
m
m <- makeCacheMatrix(m)
source("cacheMatrix.R")
m <- makeCacheMatrix(m)
cacheSolve(m)
m <- matrix(1:9,nrow=3,ncol=3)
m
solve(m)
m <- matrix(2:10,nrow=3,ncol=3)
m
solve(m)
m <- matrix(c(2,3,4,5,6,7,8,9,1),nrow=3,ncol=3)
solve(m)
makeCacheMatrix(m)
cm <- makeCacheMatrix(m)
solve(cm)
cacheMatrix(cm)
cacheSolve(cm)
cacheSolve(cm)
source("cacheMatrix.R")
m <- matrix(c(2,3,4,5,6,7,8,9,1),nrow=3,ncol=3)
cacheMatrix(cm)
makeCacheMatrix(m)
cacheSolve(cm)
cacheSolve(cm)
